%!PS-Adobe-3.0
%%Title: cluster-cor.cpp
%%For: Sam
%%Creator: a2ps version 4.14
%%CreationDate: Wed Dec 12 05:50:26 2012
%%BoundingBox: 24 24 571 818
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 4
%%PageOrder: Ascend
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% composite fonts for ASCII-EUC mixed strings
% Version 1.2 1/31/1990
% Original Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 595 def
/sw 842 def
/llx 24 def
/urx 818 def
/ury 571 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 8.005733 def
/cw 4.803440 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   501.959430 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#include) K
( <iostream>) p n
(#include) K
( <string>) p n
(#include) K
( <fstream>) p n
(#include) K
( <vector>) p n
(#include) K
( <list>) p n
(#include) K
( <limits.h>) p n
(#include) K
( <cstring>) p n
(#include) K
( <cstdlib>) p n
(#include) K
( <time.h>) p n
(#include) K
( <cmath>) p n
(#include) K
( <) p
(float) k
(.h>) p n
(using) K
( ) p
(namespace) K
( std;) p n
() N
(const) K
( ) p
(int) k
( WINDOW_SIZE = 30;) p n
(const) K
( ) p
(int) k
( CLUSTER_NUM = 20;      ) p n
(const) K
( ) p
(int) k
( FRAME_SIZE  = 60;) p n
(const) K
( ) p
(int) k
( MAX_OFFSET  = 5;) p n
() N
(//footprint data and the signals) c n
(//This represents a single point in the domain that will be used for clustering) N
(struct) k
( fpSignalFrame{) p n
(   ) S
(float) k
( con_level[FRAME_SIZE];) p n
(   ) S
(int) k
( signal[FRAME_SIZE];       ) p
(//holding the signal level for each basepair in) c n
( the frame) N
(   ) p
(int) k
( fpStart;) p n
(   ) S
(int) k
( startSeq;                 ) p
(//the start DNA location for the frame \(includi) c n
(ng the actual footprint sequence\)) N
(   ) p
(int) k
( length;                   ) p
(//used for grabbing signal data) c n
(   ) p
(char) k
(* chr;                    ) p
(//the chromosome) c n
(   ) p
(int) k
( fpLength;                 ) p
(//length of the footprint \(from the fp data\)) c n
(   ) p
(int) k
( fpStartIndex;             ) p
(//the offset for the fixed window in the frame) c n
(   ) p
(int) k
( clusterAssigned;          ) p
(//the cluster this point is assigned to) c n
(};) p n
() N
(//cluster centroid) c n
(struct) k
( centroid{) p n
(   ) S
(float) k
( signal[WINDOW_SIZE];      ) p
(//signal level for the cluster of fixed windo) c n
(w size) N
(};) p n
() N
(//function declarations) c n
(void) k
( getFootPrint\(string FPfile, string cell, string signalFile, string chromoso) p n
(me, vector<fpSignalFrame> &f\);) N
(int) k
( distance\() p
(int) k
( pSig[], ) p
(int) k
( pIndex, ) p
(float) k
( cSig[]\);) p n
(float) k
( correlation\() p
(int) k
( pSig[], ) p
(int) k
( pIndex, ) p
(float) k
( cSig[]\);) p n
(centroid getCentroid\(vector<fpSignalFrame>* f, ) S
(float) k
( index\);) p n
(void) k
( k_mean\(vector<fpSignalFrame>* f\);) p n
(void) k
( getConsLevel\(string chr, vector<fpSignalFrame> &f\);) p n
() N
(int) k
( main\(\)) p n
({) N
(   vector<fpSignalFrame>* fpF = ) S
(new) K
( vector<fpSignalFrame>;) p n
(   string chromosomes[] = {") S
(chr1) str
(",") p
(chr2) str
(",") p
(chr3) str
(",") p
(chr4) str
(",") p
(chr5) str
(",") p
(chr6) str
(",") p
(chr7) str
(",") p
(chr8) str
(",") p
(chr9) str
(") p n
(,) N
(                           ") S
(chr10) str
(",") p
(chr11) str
(",") p
(chr12) str
(",") p
(chr13) str
(",") p
(chr14) str
(",") p
(chr15) str
(",") p
(chr16) str
(",") p
(chr17) str
() p n
(",") S
(chr18) str
(",") p
(chr19) str
(",") p
(chr20) str
(",) p n
(                           ") S
(chr21) str
(", ") p
(chr22) str
(",") p
(chrX) str
("};) p n
(   cout <<") S
(start getting footprint data) str
("<<endl;) p n
(   ) S
(for) K
(\() p
(int) k
( i=0; i<23; i++\){) p n
(      getFootPrint\(") S
(all.footprints) str
(", ") p
(K562) str
(", ") p
(K562Sig_filter.wig) str
(", chromosomes[i], \(*fpF\)\)) p n
(;) N
() N
(cluster-cor.cpp) (Page 1/8) (Dec 12, 12 5:37) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(   }) p n
(   k_mean\(fpF\);) N
(   ) S
(delete) K
( fpF;) p n
(   ) S
(return) K
( 0;) p n
() N
(}) N
() N
(//read the base level conservational energy data for each cluster points) c n
(void) k
( getConsLevel\(string chr, vector<fpSignalFrame> &temp_con_f, vector<fpSignal) p n
(Frame> &f\)) N
({) N
(   string cons_file = ") S
(cons_data/) str
("+chr+") p
(.phyloP46way.placental.wigFix) str
(";) p n
(   ifstream Cinfile\(cons_file.c_str\(\)\);) N
(   string a;) N
(   string ss;) N
(   ) S
(int) k
( start;) p n
(   Cinfile >> a>> a >> ss >> a;) N
(   ) N
(   start = atoi\(ss.substr\(6\).c_str\(\)\);) N
(   string value;) N
() N
(   vector<fpSignalFrame>::iterator it;) N
(   ) S
(while) K
(\(Cinfile >> value\){) p n
(      ) N
(      ) S
(for) K
(\(it=temp_con_f.begin\(\); it<temp_con_f.end\(\); it++\){) p n
(         ) S
(if) K
(\(it->chr == chr && it->startSeq+it->length > start\)) p n
(            ) S
(break) K
(;) p n
(         ) S
(if) K
(\(it->chr == chr && it->length+it->startSeq == start\){) p n
(            it->con_level[it->length] = atof\(value.c_str\(\)\);) N
(            it->length++;) N
(            ) S
(if) K
(\(it->length >= FRAME_SIZE\){) p n
(                  f.push_back\(*it\);) N
(                  temp_con_f.erase\(it\);) N
(                  it--;) N
(                  ) S
(if) K
(\(temp_con_f.size\(\) ==0 \)) p n
(                     ) S
(return) K
(;) p n
(               }) N
(         }) N
(      }) N
(      start++;) N
(   }) N
(   Cinfile.close\(\);) N
(}) N
() N
() N
(//read the footprint file for foorprint sequences) c n
(void) k
( getFootPrint\(string FPfile, string cell, string signalFile, string chromoso) p n
(me, vector<fpSignalFrame> &f\)) N
({) N
(   ) S
(//temporarily holding the fp data) c n
(   vector<fpSignalFrame> temp_f;) p n
(   vector<fpSignalFrame> temp_con_f;) N
(   ) S
(//variables to read in) c n
(   ) p
(int) k
( s, e;   ) p
(//start sequence, end sequence) c n
(   ) p
(double) k
( fos; ) p
(//footprint occupancy score) c n
(   string chr, ctype; ) p
(//chromosome number, cell type) c n
(   cout <<chromosome<<") p
(, ) str
("<<cell<<endl;) p n
() N
(   ifstream FPinfile\(FPfile.c_str\(\)\);) N
(   ) S
(while) K
(\(FPinfile >> chr >> s >> e >> ctype >> fos\){) p n
(      ) S
(//get a specific cell type     ) c n
(      ) p
(if) K
(\(ctype == cell && chr == chromosome\){) p n
(cluster-cor.cpp) (Page 2/8) (Dec 12, 12 5:37) title
border
grestore
(Printed by Sam) rhead
(cluster-cor.cpp) (1/4) (Wednesday December 12, 2012) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(         fpSignalFrame fpp;) p n
(         fpp.startSeq = s - \(FRAME_SIZE-\(e-s\)\)/2;) N
(         fpp.length   = 0;) N
(         fpp.fpStart  = s;) N
(         fpp.chr      = ) S
(new) K
( ) p
(char) k
( [chromosome.size\(\)+1];) p n
(         fpp.fpLength = e-s;) N
(         fpp.clusterAssigned = -1;) N
(         fpp.fpStartIndex = 15; ) S
(//window size of 30bp aligned in the center) c n
(         strcpy\(fpp.chr, chromosome.c_str\(\)\);) p n
(         temp_f.push_back\(fpp\);) N
(      }) N
(   }) N
(   cout <<") S
(fp size for this chromosome..) str
(" << temp_f.size\(\)<<endl;) p n
(   FPinfile.close\(\);) N
(   ) S
(//READ FP signals) c n
(   ) p
(int) k
( START,signal;) p n
(   ) S
(bool) k
( first = ) p
(false) k
(;) p n
(   ifstream singalinfile\(signalFile.c_str\(\)\);) N
() N
(   vector<fpSignalFrame>::iterator it;) N
(   ) S
(//read through the signal data, if the window contains footprint sequence) c n
(   ) p
(//first iteration, find the start of sequence) c n
(   ) p
(while) K
(\(singalinfile >> chr >> s >> e >> signal\){) p n
(      ) S
(if) K
(\(chr == chromosome\){) p n
() N
(         ) S
(if) K
(\(!first\){) p n
(            first = ) S
(true) k
(;) p n
(            START = s+1;) N
(         }) S
(else) K
({) p n
(            ) S
(//skip useless zero signals...) c n
(            ) p
(int) k
( firstFPSeq = \(\(temp_f.begin\(\)\)->startSeq\)+\(\(temp_f.begin\(\)\)->len) p n
(gth\);) N
(            ) S
(if) K
(\(START < firstFPSeq && firstFPSeq < s\)) p n
(               START = firstFPSeq;) N
(            ) S
(else) K
( ) p
(if) K
(\(START<firstFPSeq && s < firstFPSeq\)) p n
(               START = s+1;) N
(            ) S
(//insert zero signal) c n
(            ) p
(while) K
(\(START < s\){) p n
(               ) S
(//iterate through the temp footprint vector and insert the signal) c n
(File  ) N
(               ) p
(for) K
(\(it=temp_f.begin\(\); it<temp_f.end\(\); it++\){) p n
(                  ) S
(//break if the seq is bigger) c n
(                  ) p
(if) K
(\( \(it->startSeq+it->length\) > START\)) p n
(                     ) S
(break) K
(; ) p n
() N
(                  ) S
(//if it's the sequence to enter) c n
(                  ) p
(if) K
(\( \(it->startSeq+ it->length\) == START\){) p n
(                     it->signal[it->length] = 0;) N
(                     it->length++;) N
(                     ) S
(//if the point is full, push it to vector f ) c n
(                     ) p
(if) K
(\(it->length >= FRAME_SIZE\){) p n
(                        it->length = 0;) N
(                        temp_con_f.push_back\(*it\);) N
(                        temp_f.erase\(it\);) N
(                        it--;) N
(                        ) S
(if) K
(\(temp_f.size\(\) ==0 \){) p n
(                           ) S
(//read in conservational level for each point) c n
(                           getConsLevel\(chromosome, temp_con_f, f\);) p n
(                           ) S
(return) K
(;) p n
(                        }) N
(                     }) N
(                  }) N
(cluster-cor.cpp) (Page 3/8) (Dec 12, 12 5:37) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(                  ) p n
(               }) N
(                START++;            ) N
(            }) N
(            START = s+1;) N
(         }) N
(         ) S
(//iterate through the temp footprint vector and insert the signalFile  ) c n
(         ) p
(for) K
(\(it=temp_f.begin\(\); it<temp_f.end\(\); it++\){) p n
(            ) S
(//break if the seq is bigger) c n
(            ) p
(if) K
(\( \(it->startSeq+it->length\) > s\)) p n
(               ) S
(break) K
(; ) p n
() N
(            ) S
(//if it's the sequence to enter) c n
(            ) p
(if) K
(\( \(it->startSeq+ it->length\) == s\){) p n
(               it->signal[it->length] = signal;) N
(               it->length++;) N
(               ) S
(//if the point is full, push it to vector f ) c n
(               ) p
(if) K
(\(it->length >= FRAME_SIZE\){) p n
(                  it->length = 0;) N
(                  temp_con_f.push_back\(*it\);) N
(                  temp_f.erase\(it\);) N
(                  it--;) N
(                  ) S
(if) K
(\(temp_f.size\(\) ==0 \){) p n
(                     ) S
(//read in conservational level for each point) c n
(                     getConsLevel\(chromosome, temp_con_f, f\);) p n
(                     ) S
(return) K
(;) p n
(                  }) N
(               }) N
(            }) N
(            ) N
(         }         ) N
() N
(      }) N
(      ) N
(   }) N
(   ) N
(  singalinfile.close\(\);) N
(}) N
() N
(//return a centroid given a fp point, and the starting index of the fixed window) c n
(centroid getCentroid\(vector<fpSignalFrame>* f, ) p
(int) k
( index\)) p n
({) N
(    centroid s;) N
(    ) S
(int) k
( startIndex = \(*f\)[index].fpStartIndex;) p n
(    ) S
(for) K
(\() p
(int) k
( i=0 ; i<WINDOW_SIZE; i++\){) p n
(        s.signal[i] = \(*f\)[index].signal[i+startIndex];) N
(    }) N
(    ) S
(return) K
( s;) p n
(}) N
() N
(//return the eclidean distance ..between a point and a centroid) c n
(int) k
( distance\() p
(int) k
( pSig[], ) p
(int) k
( pIndex, ) p
(float) k
( cSig[]\)) p n
({) N
(    ) S
(float) k
( d = 0;) p n
(    ) S
(for) K
(\() p
(int) k
( i=0; i<WINDOW_SIZE; i++\){) p n
(        d+= pow\(\(pSig[i+pIndex]- cSig[i]\), 2\);) N
(    }) N
(    ) S
(return) K
( \() p
(int) k
(\)sqrt\(d\);) p n
(}) N
() N
(float) k
( correlation\() p
(int) k
( pSig[], ) p
(int) k
( pIndex, ) p
(float) k
( cSig[]\)) p n
({) N
(cluster-cor.cpp) (Page 4/8) (Dec 12, 12 5:37) title
border
grestore
(Printed by Sam) rhead
(cluster-cor.cpp) (2/4) (Wednesday December 12, 2012) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(   ) p
(float) k
( pSigSum=0, cSigSum=0;) p n
(   ) S
(for) K
(\() p
(int) k
( i=0; i<WINDOW_SIZE; i++\){) p n
(      pSigSum+= pSig[i+pIndex];) N
(      cSigSum+= cSig[i];) N
(   }) N
(   pSigSum = pSigSum/\() S
(float) k
(\)WINDOW_SIZE;) p n
(   cSigSum = cSigSum/\() S
(float) k
(\)WINDOW_SIZE;) p n
(   ) S
(//cout <<"psum: " <<pSigSum << " , cSum: " << cSigSum <<endl;) c n
(   ) p
(float) k
( top=0;) p n
(   ) S
(float) k
( stdA=0, stdB=0;) p n
(   ) S
(for) K
(\() p
(int) k
( i=0; i<WINDOW_SIZE; i++\){) p n
(      top+= \(\() S
(float) k
(\)pSig[i+pIndex]-pSigSum\)*\(cSig[i]-cSigSum\);) p n
(      stdA+= \(\() S
(float) k
(\)pSig[i+pIndex]-pSigSum\)*\(\() p
(float) k
(\)pSig[i+pIndex]-pSigSum\);) p n
(      stdB+= \(cSig[i]-cSigSum\)*\(cSig[i]-cSigSum\);) N
(   }) N
(   ) S
(return) K
( 1- \() p
(float) k
(\)top/sqrt\(stdA*stdB\);) p n
(}) N
() N
(void) k
( print_frame\() p
(float) k
( Sig[]\)) p n
({) N
(   ) S
(for) K
(\() p
(int) k
( i=0; i<WINDOW_SIZE; i++\){) p n
(      cout <<i <<") S
( ) str
("<<\(Sig[i]\) << endl;) p n
(   }) N
(   cout <<endl;) N
(}) N
() N
(//apply k-means clustering on all the fp points) c n
(void) k
( k_mean\(vector<fpSignalFrame>* f\)) p n
({) N
(    cout <<") S
(Start initializing centroids) str
("<<endl;) p n
(    ) S
(//initialize random variable) c n
(    srand \(time\() p
(NULL) K
(\) \);) p n
(    ) N
(    ) S
(//initializing k clusters using k-mean++ algorithm) c n
(    vector<centroid> C;) p n
(    ) S
(int) k
( domainSize = f->size\(\);) p n
(    ) S
(//step 1\) pick a random X from the domain) c n
(    ) p
(int) k
( s1Index= rand\(\) % domainSize;  ) p n
(    cout <<") S
(domainSize: ) str
("<<domainSize<<endl;) p n
(    cout <<") S
(push first random centroid: ) str
("<<s1Index <<endl;) p n
(    C.push_back\(getCentroid\(f, s1Index\)\);) N
(    ) N
(    ) S
(//step 2, initialize more centroid) c n
(    ) p
(//pick a point point Xi at random where Prob\(Xi\) = \(Di\)^2/\(sum of j of Dj^2\)) c n
(    vector<) p
(float) k
(> probPerPoint;) p n
(    ) S
(while) K
(\(C.size\(\) < CLUSTER_NUM\){) p n
(      ) S
(int) k
( sum=0;) p n
(      ) S
(//step 2a. calculate shortest distance between Xi and the nearest centroid) c n
(      ) p
(for) K
(\() p
(int) k
( i=0; i< domainSize; i++\){) p n
(            probPerPoint.push_back\(0\);) N
(            ) S
(int) k
( min = INT_MAX;) p n
(            ) S
(for) K
(\() p
(int) k
( j=0; j< C.size\(\); j++\){) p n
(                ) S
(//NOTE: doesn't keep track of which centroid the poitn is assign) c n
(ed to \(just the distance to the closest centroid\)) N
(                ) p
(//OFFSET range) c n
(                ) p
(int) k
( si = \(*f\)[i].fpStartIndex - MAX_OFFSET;) p n
(                ) S
(if) K
(\(si<0\) ) p n
(                  si=0;) N
(                ) S
(int) k
( ei = \(*f\)[i].fpStartIndex + MAX_OFFSET;) p n
(                ) S
(if) K
(\(ei>= \(FRAME_SIZE-WINDOW_SIZE\)\)) p n
(                  ei = FRAME_SIZE-WINDOW_SIZE-1;) N
() N
(cluster-cor.cpp) (Page 5/8) (Dec 12, 12 5:37) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(                ) S
(for) K
(\() p
(int) k
( offset= si ; offset < ei; offset++\){) p n
(                    ) S
(int) k
( d = distance\(\(*f\)[i].signal, offset, C[j].signal\);) p n
(                    ) S
(//if distance is smaller than prev min) c n
(                    ) p
(if) K
(\(d < min\){) p n
(                        min = d;) N
(                        ) S
(//change the offset) c n
(                        \(*f\)[i].fpStartIndex = offset;) p n
(                        probPerPoint[i] = \() S
(float) k
(\)min;) p n
(                    }) N
(                }) N
(            }) N
(            sum += \() S
(int) k
(\)probPerPoint[i];) p n
(        }) N
(        ) N
(        ) S
(//step 2b. find the probability for each point) c n
(        ) p
(for) K
(\() p
(int) k
( i=0; i<domainSize; i++\){) p n
(            probPerPoint[i] = probPerPoint[i]/sum;) N
(        }) N
(        ) N
(        ) S
(//step 2c. generate a random decimal and use it to assign a new centroid) c n
( point) N
(        ) p
(float) k
( r = \() p
(float) k
(\)rand\(\)/\() p
(float) k
(\)RAND_MAX;) p n
(        ) S
(float) k
( total_r=0;) p n
(        ) S
(for) K
(\() p
(int) k
( i=0; i<domainSize; i++\){) p n
(            total_r+=probPerPoint[i];) N
(            ) S
(if) K
(\(r<total_r\){) p n
(                cout <<") S
(push next centroid: ) str
("<<i <<endl;) p n
(                C.push_back\(getCentroid\(f, i\)\);) N
(                ) S
(break) K
(;) p n
(            }) N
(        }) N
(        probPerPoint.clear\(\);) N
(    }) N
(    ) N
(    ) S
(//clustering...K-mean) c n
(    cout <<") p
(start clustering... ) str
(" <<endl;) p n
(    ) S
(bool) k
( converge = ) p
(false) k
(;) p n
(    ) S
(int) k
( m=0;) p n
(    ) S
(//while the centroids are not converging) c n
(    ) p
(for) K
(\() p
(int) k
( x =0 ; x< 1000; x++\){) p n
(      converge = ) S
(true) k
(;) p n
(      cout <<") S
(\\n\\ncluster iteration : ) str
(" << m<<endl;) p n
(      m++;) N
(      ) S
(//step 1. assign each point in the domain to a closest centroids) c n
(      ) p
(for) K
(\() p
(int) k
( i=0; i< domainSize; i++\){) p n
() N
(         ) S
(float) k
( min = FLT_MAX;) p n
(         ) S
(for) K
(\() p
(int) k
( j=0; j< C.size\(\); j++\){) p n
(              ) S
(//OFFSET range) c n
(             ) p
(int) k
( si = \(*f\)[i].fpStartIndex - MAX_OFFSET;) p n
(             ) S
(if) K
(\(si<0\) ) p n
(               si=0;) N
(             ) S
(int) k
( ei = \(*f\)[i].fpStartIndex + MAX_OFFSET;) p n
(             ) S
(if) K
(\(ei>= \(FRAME_SIZE-WINDOW_SIZE\)\)) p n
(               ei = FRAME_SIZE-WINDOW_SIZE-1;) N
() N
() N
(             ) S
(for) K
(\() p
(int) k
( offset= si ; offset < ei; offset++\){) p n
(                 ) S
(float) k
( d = correlation\(\(*f\)[i].signal, offset, C[j].signal\);) p n
() N
(                 ) S
(//if distance is smaller than prev min) c n
(cluster-cor.cpp) (Page 6/8) (Dec 12, 12 5:37) title
border
grestore
(Printed by Sam) rhead
(cluster-cor.cpp) (3/4) (Wednesday December 12, 2012) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (7-8) 4
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(                 ) p
(if) K
(\(d < min\){) p n
(                     ) S
(//cout << "orig: " << min <<" , new: " << d<<endl;) c n
(                     min = d;) p n
(                     ) S
(//change the offset) c n
(                     \(*f\)[i].fpStartIndex = offset;) p n
(                     ) S
(//assign this point to the centroid) c n
(                     \(*f\)[i].clusterAssigned = j;) p n
(                 }) N
(             }) N
(         }) N
() N
(      }) N
(      ) S
(//make a empty copy of temporary centroids) c n
(      vector<centroid> temp_C;) p n
(      vector<) S
(int) k
(> ptCount;) p n
(      ) S
(for) K
(\() p
(int) k
( i=0; i<C.size\(\); i++\){) p n
(         centroid s;) N
(         ) S
(for) K
(\() p
(int) k
( j=0 ; j<WINDOW_SIZE; j++\){) p n
(            s.signal[j] = 0;) N
(         }) N
(         temp_C.push_back\(s\);) N
(         ptCount.push_back\(0\);) N
(      }) N
(      ) N
(      ) N
(      ) S
(//step 2. reposition each centroid to the average of all the points assign) c n
(ed to iterate) N
(      ) p
(for) K
(\() p
(int) k
( i=0; i<domainSize; i++\){) p n
(         ) S
(int) k
( clusterIndex = \(*f\)[i].clusterAssigned;) p n
(         ) S
(int) k
( fpIndex      = \(*f\)[i].fpStartIndex;) p n
(         ptCount[clusterIndex] = ptCount[clusterIndex]+1;) N
(         ) S
(for) K
(\() p
(int) k
( j=0; j<WINDOW_SIZE; j++\){) p n
(            temp_C[clusterIndex].signal[j] += \(*f\)[i].signal[j+fpIndex];) N
(         }) N
() N
(      }) N
(      ) S
(//average the signals and reposition the centroid) c n
(      ) p
(for) K
(\() p
(int) k
( i=0; i<C.size\(\); i++\){) p n
(         ) S
(//cout <<"index " << i <<" point count: " << ptCount[i]<<endl;) c n
(         ) p
(for) K
(\() p
(int) k
( j=0; j<WINDOW_SIZE; j++\){) p n
(            temp_C[i].signal[j] = \() S
(float) k
(\)\(temp_C[i].signal[j] / ptCount[i]\);) p n
(            ) S
(if) K
(\(C[i].signal[j] != temp_C[i].signal[j]\){) p n
(               C[i].signal[j]=temp_C[i].signal[j];) N
(               converge = ) S
(false) k
(;            ) p n
(            }) N
(         }) N
() N
(      }) N
(      temp_C.clear\(\);) N
(      ) N
(    }) N
(    ) N
(    ) S
(//print output) c n
(      ) p
(for) K
(\() p
(int) k
( i=0; i<C.size\(\); i++\){) p n
(         cout <<") S
(\\"index ) str
(" << i <<") p
( centroid... \\"\\n) str
(";) p n
(         print_frame\(C[i].signal\);) N
(         cout <<") S
(\\n\\n\\n) str
(";) p n
(       } ) N
(       ) N
(     cout <<") S
(conservational data for each cluster: ) str
(" <<endl<<endl;) p n
(      ) S
(//print conservational average for each cluster) c n
(      ) p
(for) K
(\() p
(int) k
( i=0; i<C.size\(\); i++\){) p n
(cluster-cor.cpp) (Page 7/8) (Dec 12, 12 5:37) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(         centroid s;) p n
(         ) S
(int) k
( assigned = 0;) p n
(         ) S
(for) K
(\() p
(int) k
( j=0 ; j<WINDOW_SIZE; j++\){) p n
(            s.signal[j] = 0;) N
(         }) N
(         ) N
(         ) S
(for) K
(\() p
(int) k
( j=0; j< domainSize; j++\){) p n
(            ) S
(if) K
(\(\(*f\)[j].clusterAssigned == i\){) p n
(               assigned ++;) N
(               ) S
(int) k
( fpIndex = \(*f\)[j].fpStartIndex;) p n
(               ) S
(for) K
(\() p
(int) k
( z=0; z<WINDOW_SIZE; z++\){) p n
(                  s.signal[z] += \(*f\)[j].con_level[z+fpIndex];) N
(               }   ) N
(            }) N
(         }) N
(         ) S
(for) K
(\() p
(int) k
( j=0; j<WINDOW_SIZE; j++\){) p n
(            s.signal[j] = s.signal[j]/\() S
(float) k
(\)assigned;) p n
(         ) N
(         }) N
(         ) N
(         ) S
(//print out this data) c n
(         cout <<") p
(\\"index ) str
(" << i <<") p
( centroid...conser \\"\\n) str
(";) p n
(         print_frame\(s.signal\);) N
(         cout <<") S
(\\n\\n\\n) str
(";) p n
(      }) N
(     ) N
(     ) N
(     ) N
(       ) S
(int) k
( assigned[CLUSTER_NUM];) p n
(     ) N
(      ) S
(//print centroid) c n
(       ) p
(for) K
(\() p
(int) k
( i=0; i<C.size\(\); i++\){) p n
(         assigned[i] = 0;) N
(         cout <<") S
(cluster ) str
("<< i << ") p
( points: ) str
(" <<endl;) p n
(         ) S
(for) K
(\() p
(int) k
( j=0; j< domainSize ; j++\){) p n
(            ) S
(if) K
( \(\(*f\)[j].clusterAssigned ==i \){) p n
(               assigned[i] ++;) N
(                cout << ") S
(In ) str
("<<\(*f\)[j].chr <<") p
(, start seq: ) str
("<< \(*f\)[j].fpStart<<endl;) p n
(                ) S
(int) k
( fpIndex      = \(*f\)[j].fpStartIndex;) p n
(                ) S
(for) K
( \() p
(int) k
( z=0; z<WINDOW_SIZE ; z++\){) p n
(                  cout << \(*f\)[j].signal[z+fpIndex] << ") S
( ) str
(";) p n
(               }) N
(               cout <<endl;) N
(             }) N
(            ) N
(            }) N
(         ) N
(         }) N
(      ) S
(//print the number of points for each cluster) c n
(      ) p
(for) K
( \() p
(int) k
( i=0; i< CLUSTER_NUM; i++\){) p n
(         cout <<") S
(cluster ) str
(" << i <<") p
( has ) str
(" << assigned[i] << ") p
( points \\n) str
(";) p n
(      ) N
(      }) N
(}) N
() N
() N
(cluster-cor.cpp) (Page 8/8) (Dec 12, 12 5:37) title
border
grestore
(Printed by Sam) rhead
(cluster-cor.cpp) (4/4) (Wednesday December 12, 2012) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
